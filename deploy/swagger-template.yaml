openapi: 3.0.0
info:
  title: CNS Manager
  description: "**CNS Manager** helps detect and auto remediate all the storage control\
    \ plane known issues in the CNS solution. \n\nCNS Manager exposes APIs that can\
    \ be invoked by authorized users to detect, remediate and\ntroubleshoot problems.\
    \ CNS manager also continously and periodically monitors the system for all\n\
    the known issues and exposes relevant metrics in the Prometheus format."
  license:
    name: VMware Inc.
  version: 1.0.0
servers:
  - url: http://%CNS_MANAGER_ENDPOINT%/1.0.0/
    description: CNS manager endpoint.
tags:
  - name: ClusterRecordKeeping
    description: Everything about recording cluster details.
  - name: DatastoreOperations
    description: Operations invoked directly on datastores.
  - name: JobDetails
    description: Operations related to CNS manager asynchronous jobs.
paths:
  /listregisteredclusters:
    get:
      tags:
        - ClusterRecordKeeping
      summary: Get the list of registered k8s clusters from CNS manager inventory.
      description: CNS manager does a record keeping of all the clusters in a vCenter.
        The registered cluster config is  stored in the CNS manager inventory by using
        ClusterId as the key. The listregisteredclusters API will return the list
        of all the registered clusterIds as an array.
      operationId: listregisteredclusters
      responses:
        "200":
          description: Returns clusterIds registered in CNS manager.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterIds'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /registercluster:
    post:
      tags:
        - ClusterRecordKeeping
      summary: Register a cluster with the CNS Manager.
      description: "The API takes kubeconfig of a given cluster as an input. Make sure to copy the \
        \ contents of the Cluster KubeConfig to a file. The kubeconfig is stored securely inside \
        \ a k8s secret on the cluster where CNS manager is deployed. The API additionally takes optional \
        \ params to read cluster-id set for CSI driver from the CSI secret."
      operationId: registercluster
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                clusterKubeConfigFile:
                  type: string
                  format: binary
                  description: A file with cluster kubeconfig content.
                  allowEmptyValue: false
                  required: true
              required:
                - clusterKubeConfigFile
      parameters:
        - name: csiDriverSecretName
          in: query
          description: (Optional) Refers to the name of the config secret of vsphere-csi-driver.
          style: form
          explode: true
          schema:
            type: string
            format: string
            default: vsphere-config-secret
        - name: csiDriverSecretNamespace
          in: query
          description: (Optional) Refers to the namespace of the config secret of vsphere-csi-driver.
          style: form
          explode: true
          schema:
            type: string
            format: string   
            default: vmware-system-csi
      responses:
        "200":
          description: Returns RegisterClusterResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterClusterResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /deregistercluster:
    post:
      tags:
        - ClusterRecordKeeping
      summary: Deregister a cluster with the CNS Manager.
      description: The API takes unique clusterID as input and de-registers the cluster
        from CNS Manager.
      operationId: deregistercluster
      parameters:
        - name: clusterId
          in: query
          description: Refers to cluster-id available in decoded data field from vsphere-config-secret.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns DeregisterClusterResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeregisterClusterResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /datastoreresources:
    get:
      tags:
        - DatastoreOperations
      summary: Get volumes(CNS & non-CNS) and virtual machines on a datastore.
      description: "This API returns all the volumes(container volumes and non-CNS)\
        \ as well as the virtual machines on a particular datastore.\nIt is particularly\
        \ useful to get this information while decommissioning a datastore. \nThe\
        \ fcd ids outputted from this API can then be used as an input parameter in\
        \ MigrateVolumes API."
      operationId: getDatastoreResources
      parameters:
        - name: datacenter
          in: query
          description: Datacenter name where the datastore is located. This input is
            case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Name of the datastore on which container volumes need to be queried.
            This input is case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns DatastoreResourcesResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatastoreResourcesResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /migratevolumes:
    post:
      tags:
        - DatastoreOperations
      summary: Migrate volumes from source datastore to target datastore.
      description: "Volumes may need to be moved between the different datastores\
        \ due to various \nreasons like retiring older datastores, replacing or disruptive\
        \ upgrades to existing\ndatastores, saving volumes from failing datastores\
        \ and so on. This API supports storage\nvMotion for PVs between different\
        \ datastores (of same or different types).\nIt returns a job id, the status\
        \ of which can be retrieved using `jobStatus` API."
      operationId: migrateVolumes
      parameters:
        - name: datacenter
          in: query
          description: Datacenter name where source and target datastores are located.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: sourceDatastore
          in: query
          description: "(Optional) Name of the source datastore. Specify only if all\
          \ volumes from source datastore need to be migrated to destination datastore,\
          \ and don't specify fcd Ids in that case. If specific list of fcd Ids is\
          \ provided, then source datastore field will be ignored."
          required: false
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: targetDatastore
          in: query
          description: Name of the target datastore.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: fcdIdsToMigrate
          in: query
          description: "(Optional) Array of FCD ids to migrate. If not specified, all\
          \ volumes from source datastore will be migrated to destination datastore."
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: skipPolicyCheck
          in: query
          description: (Optional) A flag to skip validation of volume policy with target datastore. Set to "true" to skip the policy check and force migrate a volume.
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            default: false
        - name: skipVolumeAccessibilityCheck
          in: query
          description: "(Optional) If this flag is set to 'true', it will force migrate the volumes without\
          \ checking if they will be accessible on target datastore from all cluster nodes(or topology-matching\
          \ nodes in a topology-aware environment). This may affect the application availability if it gets scheduled\
          \ on a cluster node that can't access the target datastore. So it's NOT recommended to set this flag to true."
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            format: boolean
            default: false
      responses:
        "202":
          description: Returns MigrateVolumesResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MigrateVolumesResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /getjobstatus:
    get:
      tags:
        - JobDetails
      summary: Get status of an asynchronous job.
      description: "There are a few functionalities offered through this tool that\
        \ are long-running and may be \nrunning in background. This API helps to fetch\
        \ the status of a job that's submitted, in progress\nor completed. A job can\
        \ be in one of the following status:\n\nQueued - Job has been created but\
        \ hasn't started processing.\n\nRunning - Job is currently executing.\n\n\
        Success - Job has completed successfully with all tasks succeeding.\n\nError\
        \ - Job ran but some or all of its tasks failed."
      operationId: getJobStatus
      parameters:
        - name: jobId
          in: query
          description: Job Id for which the details need to be fetched.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns JobResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /waitforjob:
    get:
      tags:
      - JobDetails
      summary: Wait until a job is successful or failed.
      description: "This is a blocking API that waits for job to get successful or \n\
        fail. Unlike `getJobStatus` API which fetches the current\nstatus of the job,\
        \ this will wait for the job to finish before \nreturning the job result response."
      operationId: waitForJob
      parameters:
      - name: jobId
        in: query
        description: Job Id for which to wait to complete.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: string
      responses:
        "200":
          description: Returns JobResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobResult'
  /suspendvolumeprovisioning:
    post:
      tags:
      - DatastoreOperations
      summary: Suspend Create Volume operation on datastore.
      description: "This API will block creation of new File and Block volumes on the specified datastore. To unblock volume provisioning, invoke ResumeVolumeProvisioning API. \n\
      Other volume operations like attach, detach, delete etc. will not get affected for existing volumes."
      operationId: suspendVolumeProvisioning
      parameters:
        - name: datacenter
          in: query
          description: Datacenter name where the datastore is located. This input is case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Name of the datastore where creation of new volumes has to be blocked. This input is case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns SuspendVolumeProvisioningResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuspendVolumeProvisioningResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resumevolumeprovisioning:
    post:
      tags:
      - DatastoreOperations
      summary: Resume Create Volume operation on datastore.
      description: "This API will unblock creation of new File and Block volumes on the specified datastore. To block volume provisioning, invoke SuspendVolumeProvisioning API."
      operationId: resumeVolumeProvisioning
      parameters:
        - name: datacenter
          in: query
          description: Datacenter name where the datastore is located. This input is case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
        - name: datastore
          in: query
          description: Name of the datastore where creation of new volumes has to be resumed. This input is case-sensitive.
          required: true
          style: form
          explode: true
          schema:
            type: string
            format: string
      responses:
        "200":
          description: Returns ResumeVolumeProvisioningResult.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeVolumeProvisioningResult'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      required:
        - error
        - message
      properties:
        message:
          type: string
        error:
          type: string
    ClusterIds:
      type: array
      description: Array of cluster IDs registered in CNS manager.
      items:
        type: string
      x-schema-name: ClusterIds
    RegisterClusterResult:
      properties:
        status:
          type: string
          description: Status to indicate if registration was successful.
          format: string
          example: Registration Successful
        clusterId:
          type: string
          description: Indicates the clusterId which got registered with CNS Manager.
          format: string
          example: cluster-1
      example:
        status: Registration Successful
        clusterId: cluster-1
    DeregisterClusterResult:
      properties:
        status:
          type: string
          description: Status to indicate if deregistration was successful.
          format: string
          example: Deregistration Successful
        clusterId:
          type: string
          description: Indicates the clusterId which got deregistered with CNS Manager.
          format: string
          example: cluster-1
      example:
        status: Deregistration Successful
        clusterId: cluster-1
    FcdAttachmentDetails:
      properties:
        attached:
          type: boolean
          description: Indicates whether the volume is attached to a VM or not.
          example: true
        vm:
          type: string
          description: The name of VM to which the volume is attached.
          example: k8s-node-1
      example:
        vm: k8s-node-1
        attached: true
    JobResult:
      properties:
        jobId:
          type: string
          description: ID of the job.
          example: volumemigrationjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
        phase:
          type: string
          description: Current phase of the job.
          example: Running
        jobParameters:
          type: object
          description: Input parameters of the job.
          oneOf:
            - $ref: '#/components/schemas/VolumeMigrationJobParameters'
        jobStatus:
          type: object
          description: Status of individual tasks and the overall job status.
          oneOf:
            - $ref: '#/components/schemas/VolumeMigrationJobStatus'
      example:
        phase: Running
        jobId: volumemigrationjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
        jobStatus: ""
        jobParameters: ""
    DatastoreResourcesResult:
      properties:
        datacenter:
          type: string
          description: Datacenter on which datastore resides.
          example: VSAN-DC
        datastore:
          type: string
          description: Datastore on which container volumes are being queried.
          example: vsanDatastore
        totalVolumes:
          type: integer
          description: The number of volumes on the datastore.
          format: int64
          example: 12
        containerVolumes:
          type: array
          description: Array of CNS volumes with the FCD id and vm attachment details.
          items:
            $ref: '#/components/schemas/VolumeDetails'
        otherVolumes:
          type: array
          description: Array of non-CNS volumes with the FCD id and vm attachment
            details.
          items:
            $ref: '#/components/schemas/VolumeDetails'
        virtualMachines:
          type: array
          description: Array of virtual machines on the datastore.
          items:
            $ref: '#/components/schemas/VMDetails'
      example:
        totalVolumes: 12
        datastore: vsanDatastore
        otherVolumes:
          - null
          - null
        datacenter: VSAN-DC
        containerVolumes:
          - attachmentDetails:
              vm: k8s-node-1
              attached: true
            fcdName: pvc-338934c2-6067-489a-a929-7c559ea18c82
            host: 10.187.143.84
            fcdId: 64d6787e-397b-4c99-a151-c6f37c49fcff
          - attachmentDetails:
              vm: k8s-node-1
              attached: true
            fcdName: pvc-338934c2-6067-489a-a929-7c559ea18c82
            host: 10.187.143.84
            fcdId: 64d6787e-397b-4c99-a151-c6f37c49fcff
        virtualMachines:
          - vmName: k8s-worker1
            vmId: vm-41
          - vmName: k8s-worker1
            vmId: vm-41
    VolumeDetails:
      properties:
        fcdId:
          type: string
          description: ID of the FCD.
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        fcdName:
          type: string
          description: Name of the FCD.
          example: pvc-338934c2-6067-489a-a929-7c559ea18c82
        attachmentDetails:
          $ref: '#/components/schemas/FcdAttachmentDetails'
        host:
          type: string
          description: Host owning the node vm to which the volume is attached.
          example: 10.187.143.84
      example:
        attachmentDetails:
          vm: k8s-node-1
          attached: true
        fcdName: pvc-338934c2-6067-489a-a929-7c559ea18c82
        host: 10.187.143.84
        fcdId: 64d6787e-397b-4c99-a151-c6f37c49fcff
    VMDetails:
      properties:
        vmName:
          type: string
          description: Name of the virtual machine.
          example: k8s-worker1
        vmId:
          type: string
          description: Id of the virtual machine.
          example: vm-41
      example:
        vmName: k8s-worker1
        vmId: vm-41
    MigrateVolumesResult:
      properties:
        jobId:
          type: string
          description: Identifier of the volume migration job submitted
          example: volumemigrationjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
      example:
        jobId: volumemigrationjob-d1e10795-700f-11ec-bcf8-8630aaccb28e
    VolumeMigrationJobParameters:
      properties:
        datacenter:
          type: string
          description: Datacenter on which source and target datastores reside.
          example: VSAN-DC
        sourceDatastore:
          type: string
          description: Name of the source datastore for volume migration.
          example: vsanDatastore
        targetDatastore:
          type: string
          description: Name of the target datastore for volume migration.
          example: nfs-1
        volumesToMigrate:
          type: array
          description: Array of volumes provided to be migrated.
          items:
            type: string
    VolumeMigrationJobStatus:
      properties:
        overallPhase:
          type: string
          description: Overall phase of the volume migration job.
          example: Running
          enum:
            - Queued
            - Running
            - Success
            - Error
        startTime:
          type: string
          description: Time at which the job started processing.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        endTime:
          type: string
          description: Time at which the job completed processing.
          format: date-time
          example: "2022-02-18T22:29:01Z"
        volumeMigrationTasks:
          type: array
          description: Array of status of individual volume migration tasks in the
            job.
          items:
            $ref: '#/components/schemas/VolumeMigrationTaskStatus'
    VolumeMigrationTaskStatus:
      properties:
        fcdId:
          type: string
          description: ID of the FCD being migrated
          example: 64d6787e-397b-4c99-a151-c6f37c49fcff
        phase:
          type: string
          description: Current phase of the volume migration.
          example: Success
          enum:
            - Queued
            - Running
            - Success
            - Error
        taskStartTime:
          type: string
          description: The timestamp at which the task was invoked.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        taskEndTime:
          type: string
          description: The timestamp at which the task finished.
          format: date-time
          example: "2022-02-18T22:28:54Z"
        error:
          $ref: "#/components/schemas/Fault"
    Fault:
      properties:
        message:
          type: string
          description: Error message for the fault.
          example: The object or item referred to could not be found in CNS.
        faultType:
          type: string
          description: Type of fault.
          example: CnsFault
    SuspendVolumeProvisioningResult:
      properties:
        message:
          type: string
          description: Result of suspending volume provisioning on datastore.
          example: "Successfully suspended volume provisioning on datstore nfs0-1."
      example:
        message: Successfully suspended volume provisioning on datstore nfs0-1.
    ResumeVolumeProvisioningResult:
      properties:
        message:
          type: string
          description: Result of resuming volume provisioning on datastore.
          example: "Successfully resumed volume provisioning on datstore nfs0-1."
      example:
        message: Successfully resumed volume provisioning on datstore nfs0-1.